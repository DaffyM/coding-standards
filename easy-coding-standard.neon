includes:
    # pick set from https://github.com/Symplify/EasyCodingStandard/tree/master/config
    - vendor/symplify/easy-coding-standard/config/psr2.neon

checkers:
    - PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff
    # Fine-tuning of PSR-2 standard

    # Todo: Use own set for code reviews, that doess not block continuous integration.
    # Sometimes, there is no other way than have longer lines. For example when using fully-qualified namespaces in type hinting comments.
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Files\LineLengthSniff

    # Custom ShopSys standards
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\ForLoopShouldBeWhileLoopSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\ForLoopWithTestFunctionCallSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\JumbledIncrementerSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\UnconditionalIfStatementSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\TodoSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\FixmeSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Formatting\NoSpaceAfterCastSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Functions\CallTimePassByReferenceSniff
    PHP_CodeSniffer\Standards\Generic\Sniffs\Metrics\CyclomaticComplexitySniff:
        absoluteComplexity: 13
    - PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\ConstructorNameSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\CamelCapsFunctionNameSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\UpperCaseConstantNameSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\DiscourageGotoSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\NoSilencedErrorsSniff
    - PHP_CodeSniffer\Standards\MySource\Sniffs\PHP\GetRequestDataSniff
    - PHP_CodeSniffer\Standards\PEAR\Sniffs\Commenting\InlineCommentSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\Classes\ValidClassNameSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\NamingConventions\ValidVariableNameSniff
    - PHP_CodeSniffer\Standards\Generic\Sniffs\Formatting\DisallowMultipleStatementsSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\DisallowSizeFunctionsInLoopsSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\EvalSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\GlobalKeywordSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\InnerFunctionsSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\LowercasePHPFunctionsSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\NonExecutableCodeSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope\StaticThisUsageSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\Strings\DoubleQuoteUsageSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\CastSpacingSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\LanguageConstructSpacingSniff
    - PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\LogicalOperatorSpacingSniff
    - ShopSys\CodingStandards\Sniffs\ForbiddenExitSniff
    - ShopSys\CodingStandards\Sniffs\ForbiddenSuperGlobalSniff

#->setRules([
#        '@PSR2' => true,
#        'array_syntax' => ['syntax' => 'short'],
#        'binary_operator_spaces' => ['align_double_arrow' => false, 'align_equals' => false],
#        'blank_line_after_opening_tag' => true,
#        'combine_consecutive_unsets' => true,
#        'concat_space' => ['spacing' => 'one'],
#        'ereg_to_preg' => true,
#        'function_typehint_space' => true,
#        'include' => true,
#        'linebreak_after_opening_tag' => true,
#        'lowercase_cast' => true,
#        'native_function_casing' => true,
#        'new_with_braces' => true,
#        'no_alias_functions' => true,
#        'no_blank_lines_after_phpdoc' => true,
#        'no_empty_comment' => true,
#        'no_empty_phpdoc' => true,
#        'no_empty_statement' => true,
#        'no_extra_consecutive_blank_lines' => ['use', 'extra'],
#        'no_leading_import_slash' => true,
#        'no_leading_namespace_whitespace' => true,
#        'no_mixed_echo_print' => ['use' => 'echo'],
#        'no_multiline_whitespace_around_double_arrow' => true,
#        'no_multiline_whitespace_before_semicolons' => true,
#        'no_php4_constructor' => true,
#        'no_short_bool_cast' => true,
#        'no_singleline_whitespace_before_semicolons' => true,
#        'no_spaces_around_offset' => ['inside', 'outside'],
#        'no_trailing_comma_in_list_call' => true,
#        'no_trailing_comma_in_singleline_array' => true,
#        'no_unneeded_control_parentheses' => ['break', 'clone', 'continue', 'echo_print', 'return', 'switch_case', 'yield'],
#        'no_unused_imports' => true,
#        'no_useless_return' => true,
#        'no_whitespace_before_comma_in_array' => true,
#        'no_whitespace_in_blank_line' => true,
#        'non_printable_character' => true,
#        'normalize_index_brace' => true,
#        'object_operator_without_whitespace' => true,
#        'ordered_imports' => true,
#        'phpdoc_annotation_without_dot' => true,
#        'phpdoc_indent' => true,
#        'phpdoc_no_useless_inheritdoc' => true,
#        'phpdoc_no_access' => true,
#        'phpdoc_no_alias_tag' => ['type' => 'var'],
#        'phpdoc_no_empty_return' => true,
#        'phpdoc_no_package' => true,
#        'phpdoc_order' => true,
#        'phpdoc_scalar' => true,
#        'phpdoc_single_line_var_spacing' => true,
#        'phpdoc_trim' => true,
#        'phpdoc_var_without_name' => true,
#        'protected_to_private' => true,
#        'self_accessor' => true,
#        'semicolon_after_instruction' => true,
#        'Shopsys/missing_button_type' => true,
#        'Shopsys/orm_join_column_require_nullable' => true,
#        'short_scalar_cast' => true,
#        'single_blank_line_before_namespace' => true,
#        'space_after_semicolon' => true,
#        'single_quote' => true,
#        'single_line_comment_style' => ['comment_types' => ['hash']],
#        'standardize_not_equals' => true,
#        'strict_param' => true,
#        'ternary_operator_spaces' => true,
#        'trailing_comma_in_multiline_array' => true,
#        'trim_array_spaces' => true,
#        'unary_operator_spaces' => true,
#        'whitespace_after_comma_in_array' => true,
#    ])

parameters:
    skip_codes:
        # private properties should not start with "_"
        - PHP_CodeSniffer\Standards\Squiz\Sniffs\NamingConventions\ValidVariableNameSniff.PrivateNoUnderscore
        # allow empty "catch (Exception $exception) { }"
        - PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff.DetectedCATCH
